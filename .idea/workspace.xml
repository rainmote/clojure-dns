<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="fbe62677-fc48-4014-abe2-cc3592622c94" name="Default" comment="">
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/ClojureProjectResolveSettings.xml" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/compiler.xml" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__clojure_complete_0_2_4.xml" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_clojure_1_8_0.xml" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_tools_nrepl_0_2_12.xml" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/modules.xml" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/vcs.xml" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/clojure-dns.iml" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/src/clojure_dns/protocol.clj" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/src/clojure_dns/test.clj" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/project.clj" afterPath="$PROJECT_DIR$/project.clj" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/clojure_dns/core.clj" afterPath="$PROJECT_DIR$/src/clojure_dns/core.clj" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/clojure_dns/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="330">
              <caret line="15" column="0" lean-forward="false" selection-start-line="15" selection-start-column="0" selection-end-line="15" selection-end-column="0" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="test.clj" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/clojure_dns/test.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="-11584">
              <caret line="1109" column="47" lean-forward="false" selection-start-line="1109" selection-start-column="47" selection-end-line="1109" selection-end-column="47" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="project.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="154">
              <caret line="7" column="39" lean-forward="false" selection-start-line="7" selection-start-column="39" selection-end-line="7" selection-end-column="39" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="protocol.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/clojure_dns/protocol.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="1628">
              <caret line="74" column="16" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="119" selection-end-column="0" />
              <folding>
                <marker date="1535935564508" expanded="true" signature="1818:2291" ph="(defn fn-encode ...)" />
                <marker date="1535935564508" expanded="true" signature="3092:3542" ph="(defn construct-request ...)" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GradleLocalSettings">
    <option name="externalProjectsViewState">
      <projects_view />
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/clojure_dns/core.clj" />
        <option value="$PROJECT_DIR$/src/clojure_dns/protocol.clj" />
        <option value="$PROJECT_DIR$/src/clojure_dns/test.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds">
    <option name="y" value="23" />
    <option name="width" value="1920" />
    <option name="height" value="877" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
      <flattenPackages />
      <showMembers />
      <showModules />
      <showLibraryContents />
      <hideEmptyPackages />
      <abbreviatePackageNames />
      <autoscrollToSource />
      <autoscrollFromSource />
      <sortByType />
      <manualOrder />
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="AndroidView" />
      <pane id="Scratches" />
      <pane id="Scope" />
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="clojure-dns" type="b2602c69:ProjectViewProjectNode" />
              <item name="clojure-dns" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="clojure-dns" type="b2602c69:ProjectViewProjectNode" />
              <item name="clojure-dns" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="clojure-dns" type="b2602c69:ProjectViewProjectNode" />
              <item name="clojure-dns" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="clojure_dns" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="clojure-dns" type="b2602c69:ProjectViewProjectNode" />
              <item name="clojure-dns" type="462c0819:PsiDirectoryNode" />
              <item name="target" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="settings.editor.selected.configurable" value="preferences.externalDependencies" />
    <property name="cursive.last.file.extension./Users/lianshitw/Desktop/Clojure/clojure-dns/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
  </component>
  <component name="ReplState" timestamp="1536333926276">{:repl-history {:ide [], :local [{:command &quot;(let [h-&gt;b (fn [head]\n             (if (= (bit-and head 0xC0) 0xC0)\n               (compile-frame [:ubyte])\n               (compile-frame [(string :ascii :length head)\n                               (repeated (string :ascii\n                                                 :prefix :ubyte)\n                                         :prefix :none)]\n                              #(vector (first %) (rest %))\n                              #(-&gt; % flatten vec))))\n      b-&gt;h (fn [body]\n             (let [e (first body)]\n               (if (string? e)\n                 (count e)\n                 e)))\n      codec (compile-frame (header :ubyte h-&gt;b b-&gt;h))\n      bs (encode codec [\&quot;aaa\&quot; \&quot;bb\&quot; \&quot;\&quot;])]\n  (byte-streams/print-bytes\n    (encode codec [\&quot;www\&quot; \&quot;google\&quot; \&quot;com\&quot; \&quot;\&quot;]))\n  (byte-streams/print-bytes\n    (encode codec [0xC0 0x42]))\n  (decode codec bs))&quot;, :offset 844, :ns &quot;user&quot;} {:command &quot;(let [h-&gt;b (fn [head]\n             (if (= (bit-and head 0xC0) 0xC0)\n               (compile-frame :ubyte)\n               (compile-frame [(string :ascii :length head)\n                               (repeated (string :ascii\n                                                 :prefix :ubyte)\n                                         :prefix :none)]\n                              #(vector (first %) (rest %))\n                              #(-&gt; % flatten vec))))\n      b-&gt;h (fn [body]\n             (let [e (first body)]\n               (if (string? e)\n                 (count e)\n                 e)))\n      codec (compile-frame (header :ubyte h-&gt;b b-&gt;h))\n      bs (encode codec [\&quot;aaa\&quot; \&quot;bb\&quot; \&quot;\&quot;])]\n  (byte-streams/print-bytes\n    (encode codec [\&quot;www\&quot; \&quot;google\&quot; \&quot;com\&quot; \&quot;\&quot;]))\n  (byte-streams/print-bytes\n    (encode codec [0xC0 0x42]))\n  (decode codec bs))&quot;, :offset 842, :ns &quot;user&quot;} {:command &quot;(let [h-&gt;b (fn [head]\n             (if (= (bit-and head 0xC0) 0xC0)\n               (compile-frame :ubyte)\n               (compile-frame [(string :ascii :length head)\n                               (repeated (string :ascii\n                                                 :prefix :ubyte)\n                                         :prefix :none)]\n                              #(vector (first %) (rest %))\n                              #(-&gt; % flatten vec))))\n      b-&gt;h (fn [body]\n             (let [e (first body)]\n               (if (string? e)\n                 (count e)\n                 e)))\n      codec (compile-frame (header :ubyte h-&gt;b b-&gt;h))\n      bs (encode codec [\&quot;aaa\&quot; \&quot;bb\&quot; \&quot;\&quot;])]\n  (byte-streams/print-bytes\n    (encode codec [\&quot;www\&quot; \&quot;google\&quot; \&quot;com\&quot; \&quot;\&quot;]))\n  (byte-streams/print-bytes\n    (encode codec 0xC0 0x42))\n  (decode codec bs))&quot;, :offset 840, :ns &quot;user&quot;} {:command &quot;(let [h-&gt;b (fn [head]\n             (if (= (bit-and head 0xC0) 0xC0)\n               (compile-frame :ubyte)\n               (compile-frame [(string :ascii :length head)\n                               (repeated (string :ascii\n                                                 :prefix :ubyte)\n                                         :prefix :none)]\n                              #(vector (first %) (rest %))\n                              #(-&gt; % flatten vec))))\n      b-&gt;h (fn [body]\n             (let [e (first body)]\n               (if (string? e)\n                 (count e)\n                 e)))\n      codec (compile-frame (header :ubyte h-&gt;b b-&gt;h))\n      bs (encode codec [\&quot;aaa\&quot; \&quot;bb\&quot; \&quot;\&quot;])]\n  (byte-streams/print-bytes\n    (encode codec [\&quot;www\&quot; \&quot;google\&quot; \&quot;com\&quot; \&quot;\&quot;]))\n  (byte-streams/print-bytes\n    (encode codec [0x42]))\n  (decode codec bs))&quot;, :offset 837, :ns &quot;user&quot;} {:command &quot;(let [h-&gt;b (fn [head]\n             (if (= (bit-and head 0xC0) 0xC0)\n               (compile-frame :ubyte)\n               (compile-frame [(string :ascii :length head)\n                               (repeated (string :ascii\n                                                 :prefix :ubyte)\n                                         :prefix :none)]\n                              #(vector (first %) (rest %))\n                              #(-&gt; % flatten vec))))\n      b-&gt;h (fn [body]\n             (let [e (first body)]\n               (if (string? e)\n                 (count e)\n                 e)))\n      codec (compile-frame (header :ubyte h-&gt;b b-&gt;h))\n      bs (encode codec [\&quot;aaa\&quot; \&quot;bb\&quot; \&quot;\&quot;])]\n  (byte-streams/print-bytes\n    (encode codec [\&quot;www\&quot; \&quot;google\&quot; \&quot;com\&quot; \&quot;\&quot;]))\n  (byte-streams/print-bytes\n    (encode codec [0xC1 0x42]))\n  (decode codec bs))&quot;, :offset 842, :ns &quot;user&quot;} {:command &quot;(let [h-&gt;b (fn [head]\n             (if (= (bit-and head 0xC0) 0xC0)\n               (compile-frame [:ubyte])\n               (compile-frame [(string :ascii :length head)\n                               (repeated (string :ascii\n                                                 :prefix :ubyte)\n                                         :prefix :none)]\n                              #(vector (first %) (rest %))\n                              #(-&gt; % flatten vec))))\n      b-&gt;h (fn [body]\n             (let [e (first body)]\n               (if (string? e)\n                 (count e)\n                 e)))\n      codec (compile-frame (header :ubyte h-&gt;b b-&gt;h))\n      bs (encode codec [\&quot;aaa\&quot; \&quot;bb\&quot; \&quot;\&quot;])]\n  (byte-streams/print-bytes\n    (encode codec [\&quot;www\&quot; \&quot;google\&quot; \&quot;com\&quot; \&quot;\&quot;]))\n  (byte-streams/print-bytes\n    (encode codec [0xC1 0x42]))\n  (decode codec bs))&quot;, :offset 844, :ns &quot;user&quot;} {:command &quot;(let [h-&gt;b (fn [head]\n             (if (= (bit-and head 0xC0) 0xC0)\n               (compile-frame [:ubyte :ubyte])\n               (compile-frame [(string :ascii :length head)\n                               (repeated (string :ascii\n                                                 :prefix :ubyte)\n                                         :prefix :none)]\n                              #(vector (first %) (rest %))\n                              #(-&gt; % flatten vec))))\n      b-&gt;h (fn [body]\n             (let [e (first body)]\n               (if (string? e)\n                 (count e)\n                 e)))\n      codec (compile-frame (header :ubyte h-&gt;b b-&gt;h))\n      bs (encode codec [\&quot;aaa\&quot; \&quot;bb\&quot; \&quot;\&quot;])]\n  (byte-streams/print-bytes\n    (encode codec [\&quot;www\&quot; \&quot;google\&quot; \&quot;com\&quot; \&quot;\&quot;]))\n  (byte-streams/print-bytes\n    (encode codec [0xC1 0x42]))\n  (decode codec bs))&quot;, :offset 851, :ns &quot;user&quot;} {:command &quot;(let [h-&gt;b (fn [head]\n             (if (= (bit-and head 0xC0) 0xC0)\n               (compile-frame [head :ubyte])\n               (compile-frame [(string :ascii :length head)\n                               (repeated (string :ascii\n                                                 :prefix :ubyte)\n                                         :prefix :none)]\n                              #(vector (first %) (rest %))\n                              #(-&gt; % flatten vec))))\n      b-&gt;h (fn [body]\n             (let [e (first body)]\n               (if (string? e)\n                 (count e)\n                 e)))\n      codec (compile-frame (header :ubyte h-&gt;b b-&gt;h))\n      bs (encode codec [\&quot;aaa\&quot; \&quot;bb\&quot; \&quot;\&quot;])]\n  (byte-streams/print-bytes\n    (encode codec [\&quot;www\&quot; \&quot;google\&quot; \&quot;com\&quot; \&quot;\&quot;]))\n  (byte-streams/print-bytes\n    (encode codec [0xC1 0x42]))\n  (decode codec bs))&quot;, :offset 849, :ns &quot;user&quot;} {:command &quot;(let [h-&gt;b (fn [head]\n             (if (= (bit-and head 0xC0) 0xC0)\n               (compile-frame [head :ubyte])\n               (compile-frame [(string :ascii :length head)\n                               (repeated (string :ascii\n                                                 :prefix :ubyte)\n                                         :prefix :none)]\n                              #(vector (first %) (rest %))\n                              #(-&gt; % flatten vec))))\n      b-&gt;h (fn [body]\n             (let [e (first body)]\n               (if (string? e)\n                 (count e)\n                 e)))\n      codec (compile-frame (header :ubyte h-&gt;b b-&gt;h))\n      f-name (encode codec [\&quot;aaa\&quot; \&quot;bb\&quot; \&quot;\&quot;])\n      f-point (encode codec [0xC0 0x0F])]\n  (byte-streams/print-bytes\n    (encode codec [\&quot;www\&quot; \&quot;google\&quot; \&quot;com\&quot; \&quot;\&quot;]))\n  (byte-streams/print-bytes\n    (encode codec [0xC1 0x42]))\n  (println (decode codec f-name))\n  (println (decode codec f-point)))&quot;, :offset 943, :ns &quot;user&quot;} {:command &quot;(def a (vector (vector :a 1) (vector :b 2)))&quot;, :offset 44, :ns &quot;user&quot;} {:command &quot;(apply assoc {} a)&quot;, :offset 18, :ns &quot;user&quot;} {:command &quot;(apply assoc {} [:a 1 :b 2])&quot;, :offset 28, :ns &quot;user&quot;} {:command &quot;(apply assoc {} (flatten a))&quot;, :offset 28, :ns &quot;user&quot;} {:command &quot;(flatten a)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(request :domains [\&quot;www.baidu.com\&quot; \&quot;www.google.com\&quot;])&quot;, :offset 53, :ns &quot;user&quot;} {:command &quot;(def a [\&quot;www\&quot; \&quot;baidu\&quot; \&quot;com\&quot;])&quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(last a)&quot;, :offset 8, :ns &quot;user&quot;} {:command &quot;(clojure.string/ends-with? \&quot;www.baidu.com\&quot; \&quot;.\&quot;)&quot;, :offset 47, :ns &quot;user&quot;} {:command &quot;(clojure.string/ends-with? \&quot;www.baidu.com.\&quot; \&quot;.\&quot;)&quot;, :offset 48, :ns &quot;user&quot;} {:command &quot;(str \&quot;www.baidu.com\&quot; \&quot;.\&quot;)&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(vector a \&quot;.\&quot;)&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(fun :a 1\n     :b 2)&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(type a)&quot;, :offset 8, :ns &quot;user&quot;} {:command &quot;(byte-streams/convert a java.nio.ByteBuffer)&quot;, :offset 44, :ns &quot;user&quot;} {:command &quot;(def a (request :host \&quot;114.114.114.114\&quot;\n         :domains [\&quot;www.baidu.com\&quot;]))&quot;, :offset 77, :ns &quot;user&quot;} {:command &quot;(request :host \&quot;114.114.114.114\&quot;\n         :domains [\&quot;www.baidu.com\&quot; \&quot;www.google.com\&quot;])&quot;, :offset 86, :ns &quot;user&quot;} {:command &quot;(request :host \&quot;1.1.1.1\&quot;\n         :domains [\&quot;www.baidu.com\&quot;])&quot;, :offset 61, :ns &quot;user&quot;} {:command &quot;(request :host \&quot;114.114.114.114\&quot;\n         :domains [\&quot;www.baidu.com\&quot;])&quot;, :offset 69, :ns &quot;user&quot;} {:command &quot;(request :host \&quot;114.114.114.114\&quot;\n         :domains [\&quot;www.hao123.com\&quot;])&quot;, :offset 70, :ns &quot;user&quot;} {:command &quot;(use 'clojure-dns.core)&quot;, :offset 23, :ns &quot;user&quot;} {:command &quot;(request :host \&quot;8.8.8.8\&quot;\n         :domains [\&quot;www.hao123.com\&quot;])&quot;, :offset 62, :ns &quot;user&quot;} {:command &quot;(request :host \&quot;8.8.8.8\&quot;\n         :domains [\&quot;www.baidu.com\&quot;])&quot;, :offset 61, :ns &quot;user&quot;} {:command &quot;(def a (request :host \&quot;8.8.8.8\&quot;\n         :domains [\&quot;www.baidu.com\&quot;]))&quot;, :offset 69, :ns &quot;user&quot;} {:command &quot;a&quot;, :offset 1, :ns &quot;user&quot;} {:command &quot;(use 'clojure-dns.protocol)&quot;, :offset 27, :ns &quot;user&quot;} {:command &quot;(require 'gloss.io)&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(io/decode-all protocol a)&quot;, :offset 26, :ns &quot;user&quot;} {:command &quot;(def b (request :host \&quot;8.8.8.8\&quot;\n         :domains [\&quot;www.baidu.com\&quot;]))&quot;, :offset 69, :ns &quot;user&quot;} {:command &quot;(io/decode-all protocol b)&quot;, :offset 26, :ns &quot;user&quot;} {:command &quot;(require 'byte-streams)&quot;, :offset 23, :ns &quot;user&quot;} {:command &quot;(io/decode protocol b)&quot;, :offset 22, :ns &quot;user&quot;} {:command &quot;(io/contiguous b)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(io/decode-all protocol (io/contiguous b))&quot;, :offset 42, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes (io/contiguous b))&quot;, :offset 44, :ns &quot;user&quot;} {:command &quot;(def protocol\n  (compile-frame\n    (ordered-map :transaction-id :uint16\n                 :flags flags-frame\n\n                 ;; Automatically populate this field\n                 :query-rrs :uint16\n                 :answer-rrs :uint16\n                 :authority-rrs :uint16\n                 :additional-rrs :uint16\n\n                 :query (repeated query-field :prefix :none)\n                 ;:answers (repeated rr-field :prefix :none)\n                 ;:authoritative (repeated rr-field :prefix :none)\n                 ;:additional (repeated rr-field :prefix :none)\n                 )\n    fn-encode\n    fn-decode))&quot;, :offset 619, :ns &quot;user&quot;} {:command &quot;(def pr\n  (compile-frame\n    (ordered-map :transaction-id :uint16\n                 :flags flags-frame\n\n                 ;; Automatically populate this field\n                 :query-rrs :uint16\n                 :answer-rrs :uint16\n                 :authority-rrs :uint16\n                 :additional-rrs :uint16\n\n                 ;:query (repeated query-field :prefix :none)\n                 ;:answers (repeated rr-field :prefix :none)\n                 ;:authoritative (repeated rr-field :prefix :none)\n                 ;:additional (repeated rr-field :prefix :none)\n                 )\n    fn-encode\n    fn-decode))&quot;, :offset 614, :ns &quot;user&quot;} {:command &quot;(io/decode-all pr b)&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(io/encode query-field {:name [\&quot;www\&quot; \&quot;aaa\&quot;]\n                        :type 1\n                        :class 2})&quot;, :offset 110, :ns &quot;user&quot;} {:command &quot;(io/decode query-field\n           (io/encode query-field {:name [\&quot;www\&quot; \&quot;aaa\&quot;]\n                        :type 1\n                        :class 2}))&quot;, :offset 145, :ns &quot;user&quot;} {:command &quot;(io/decode-all query-field\n           (io/encode query-field {:name [\&quot;www\&quot; \&quot;aaa\&quot;]\n                        :type 1\n                        :class 2}))&quot;, :offset 149, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n           (io/encode query-field {:name [\&quot;www\&quot; \&quot;aaa\&quot;]\n                        :type 1\n                        :class 2}))&quot;, :offset 148, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n           (io/encode (repeated query-field :prefix :none)\n                      [{:name [\&quot;www\&quot; \&quot;aaa\&quot;]\n                       :type 1\n                       :class 2}\n                       {:name [\&quot;www\&quot; \&quot;bbb\&quot;]\n                        :type 8\n                        :class 8}]))&quot;, :offset 305, :ns &quot;user&quot;} {:command &quot;(io/encode (string :ascii :prefix :none :suffix 0x00) \&quot;123\&quot;)&quot;, :offset 60, :ns &quot;user&quot;} {:command &quot;(io/encode (ordered-map :name (string :ascii :prefix :none :suffix 0x00))\n           \&quot;123\&quot;)&quot;, :offset 91, :ns &quot;user&quot;} {:command &quot;(io/encode (ordered-map :name (string :ascii :prefix :none :suffix 0x00))\n           {:name \&quot;123\&quot;})&quot;, :offset 99, :ns &quot;user&quot;} {:command &quot;(io/encode (compile-frame\n             (ordered-map :name (string :ascii :prefix :none :suffix 0x00)))\n           {:name \&quot;123\&quot;})&quot;, :offset 128, :ns &quot;user&quot;} {:command &quot;(io/encode (compile-frame\n             (ordered-map :name (string :ascii :prefix :none :suffix 0x00)\n                          :type :uint16-be))\n           {:name \&quot;123\&quot; :type 8})&quot;, :offset 179, :ns &quot;user&quot;} {:command &quot;(io/encode (compile-frame\n             (ordered-map :name (string :utf-8 :prefix :none :suffix 0x00)\n                          :type :uint16-be))\n           {:name \&quot;123\&quot; :type 8})&quot;, :offset 179, :ns &quot;user&quot;} {:command &quot;(io/encode (compile-frame\n             (ordered-map :name (string :utf-8 :prefix :none :suffix \&quot;,\&quot;)\n                          :type :uint16-be))\n           {:name \&quot;123\&quot; :type 8})&quot;, :offset 178, :ns &quot;user&quot;} {:command &quot;(compile-frame\n             (ordered-map :name (string :ascii :prefix :none :suffix \&quot;,\&quot;)\n                          :type :uint16-be))\n&quot;, :offset 133, :ns &quot;user&quot;} {:command &quot;(io/encode\n  (compile-frame\n   (ordered-map :name (string :ascii :prefix :none :suffix \&quot;,\&quot;)\n               :type :uint16-be))\n&quot;, :offset 125, :ns &quot;user&quot;} {:command &quot;(io/encode\n  (compile-frame\n   (ordered-map :name (string :ascii :prefix :none :suffix \&quot;,\&quot;)\n               :type :uint16-be))\n  {:name \&quot;123\&quot;\n   :type 1})\n&quot;, :offset 153, :ns &quot;user&quot;} {:command &quot;(use 'gloss.io)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(use 'gloss.core)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(io/encode\n  (compile-frame\n   (ordered-map :name (string :ascii :prefix :none :suffix \&quot;,\&quot;)\n               :type :uint16-be))\n  {:name \&quot;\&quot;\n   :type 1})\n&quot;, :offset 150, :ns &quot;user&quot;} {:command &quot;(def aaa\n  (compile-frame\n   (ordered-map :name (string :ascii :prefix :none :suffix \&quot;,\&quot;)\n               :type :uint16-be)))\n&quot;, :offset 124, :ns &quot;user&quot;} {:command &quot;(io/encode aaa \&quot;123\&quot;)&quot;, :offset 21, :ns &quot;user&quot;} {:command &quot;(def aaa\n  (compile-frame\n   (ordered-map :dns-name (string :ascii :prefix :none :suffix \&quot;,\&quot;)\n               :type :uint16-be)))\n&quot;, :offset 128, :ns &quot;user&quot;} {:command &quot;(io/encode aaa {:name \&quot;123\&quot;})&quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(io/encode aaa {:dns-name \&quot;123\&quot;})&quot;, :offset 33, :ns &quot;user&quot;} {:command &quot;(io/encode\n  (compile-frame\n   (ordered-map :name (string :ascii :suffix \&quot;,\&quot;)\n               :type :uint16-be))\n  {:name \&quot;\&quot;\n   :type 1})\n&quot;, :offset 136, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n   (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be))\n  {:name \&quot;\&quot;\n   :type 1}))\n&quot;, :offset 166, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n   (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be))\n  {:name \&quot;123\&quot;\n   :type 1}))\n&quot;, :offset 169, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n   (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be))\n  {:name \&quot;www.baidu.com\&quot;\n   :type 1}))\n&quot;, :offset 179, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n   (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be)\n   (fn [data]\n     (let [s (clojure.string/split (:name data) #\&quot;\\.\&quot;)\n           fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n           new (io/encode fr s)]\n       (update data :name (byte-streams/convert new String))))\n   (fn [data] data))\n  {:name \&quot;www.baidu.com\&quot;\n   :type 1}))\n&quot;, :offset 434, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n   (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be)\n   (fn [data]\n     (let [s (clojure.string/split (:name data) #\&quot;\\.\&quot;)\n           fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n           new (io/encode fr s)]\n       (update data :name \&quot;bbb\&quot;)))\n   (fn [data] data))\n  {:name \&quot;www.baidu.com\&quot;\n   :type 1}))\n&quot;, :offset 406, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n   (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be)\n   (fn [data]\n     (let [s (clojure.string/split (:name data) #\&quot;\\.\&quot;)\n           fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n           new (io/encode fr s)]\n       (assoc data :name \&quot;bbb\&quot;)))\n   (fn [data] data))\n  {:name \&quot;www.baidu.com\&quot;\n   :type 1}))\n&quot;, :offset 405, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n   (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be)\n   (fn [data]\n     (let [s (clojure.string/split (:name data) #\&quot;\\.\&quot;)\n           fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n           new (io/encode fr s)]\n       (assoc data :name new)))\n   (fn [data] data))\n  {:name \&quot;www.baidu.com\&quot;\n   :type 1}))\n&quot;, :offset 403, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n   (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be)\n   (fn [data]\n     (let [s (clojure.string/split (:name data) #\&quot;\\.\&quot;)\n           fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n           new (io/encode fr s)]\n       (assoc data :name (byte-streams/convert new String)))\n   (fn [data] data))\n  {:name \&quot;www.baidu.com\&quot;\n   :type 1}))\n&quot;, :offset 432, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n   (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be)\n   (fn [data]\n     (let [s (clojure.string/split (:name data) #\&quot;\\.\&quot;)\n           fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n           new (io/encode fr s)]\n       (assoc data :name (byte-streams/convert new String))))\n   (fn [data] data))\n  {:name \&quot;www.baidu.com\&quot;\n   :type 1}))\n&quot;, :offset 433, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n    (repeated\n      (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be))\n   (fn [data]\n     (let [s (clojure.string/split (:name data) #\&quot;\\.\&quot;)\n           fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n           new (io/encode fr s)]\n       (map #(assoc % :name (byte-streams/convert new String)) data)\n       ))\n   (fn [data] data))\n  [{:name \&quot;www.baidu.com\&quot; :type 1}\n   {:name \&quot;www.google.com\&quot; :type 2}]))\n&quot;, :offset 503, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n    (repeated\n      (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be))\n   (fn [data]\n     (let [s (clojure.string/split (:name data) #\&quot;\\.\&quot;)\n           fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n           new (io/encode fr s)]\n       (println data)\n       (map #(assoc % :name (byte-streams/convert new String)) data)\n       ))\n   (fn [data] data))\n  [{:name \&quot;www.baidu.com\&quot; :type 1}\n   {:name \&quot;www.google.com\&quot; :type 2}]))\n&quot;, :offset 525, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n    (repeated\n      (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be))\n   (fn [data]\n     (println data)\n     (let [s (clojure.string/split (:name data) #\&quot;\\.\&quot;)\n           fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n           new (io/encode fr s)]\n       (map #(assoc % :name (byte-streams/convert new String)) data)\n       ))\n   (fn [data] data))\n  [{:name \&quot;www.baidu.com\&quot; :type 1}\n   {:name \&quot;www.google.com\&quot; :type 2}]))\n&quot;, :offset 523, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n    (repeated\n      (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be))\n   (fn [data]\n       (map (fn [d]\n              (let [s (clojure.string/split (:name d) #\&quot;\\.\&quot;)\n                    fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n                    new (io/encode fr s)]\n              (assoc % :name (byte-streams/convert new String)))\n            data)\n       ))\n   (fn [data] data))\n  [{:name \&quot;www.baidu.com\&quot; :type 1}\n   {:name \&quot;www.google.com\&quot; :type 2}]))\n&quot;, :offset 562, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n  (compile-frame\n    (repeated\n      (ordered-map :name (string :ascii :suffix 0x00)\n               :type :uint16-be))\n   (fn [data]\n       (map (fn [d]\n              (let [s (clojure.string/split (:name d) #\&quot;\\.\&quot;)\n                    fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n                    new (io/encode fr s)]\n              (assoc d :name (byte-streams/convert new String)))\n            data)\n       ))\n   (fn [data] data))\n  [{:name \&quot;www.baidu.com\&quot; :type 1}\n   {:name \&quot;www.google.com\&quot; :type 2}]))\n&quot;, :offset 561, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n    (compile-frame\n      (repeated\n        (ordered-map :name (string :ascii :suffix 0x00)\n                     :type :uint16-be))\n      (fn [data]\n        (println data)\n        (println (map (fn [d]\n               (let [s (clojure.string/split (:name d) #\&quot;\\.\&quot;)\n                     fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n                     new (io/encode fr s)]\n                 (assoc d :name (byte-streams/convert new String)))\n               data))))\n      (fn [data] data))\n    [{:name \&quot;www.baidu.com\&quot; :type 1}\n     {:name \&quot;www.google.com\&quot; :type 2}]))\n&quot;, :offset 618, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n    (compile-frame\n      (repeated\n        (ordered-map :name (string :ascii :suffix 0x00)\n                     :type :uint16-be))\n      (fn [data]\n        (println data)\n        (println (doall (map (fn [d]\n               (let [s (clojure.string/split (:name d) #\&quot;\\.\&quot;)\n                     fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n                     new (io/encode fr s)]\n                 (assoc d :name (byte-streams/convert new String)))\n               data)))))\n      (fn [data] data))\n    [{:name \&quot;www.baidu.com\&quot; :type 1}\n     {:name \&quot;www.google.com\&quot; :type 2}]))\n&quot;, :offset 626, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n    (compile-frame\n      (repeated\n        (ordered-map :name (string :ascii :suffix 0x00)\n                     :type :uint16-be))\n      (fn [data]\n        (println data)\n        (let [n (map (fn [d]\n                       (let [s (clojure.string/split (:name d) #\&quot;\\.\&quot;)\n                             fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n                             new (io/encode fr s)]\n                         (assoc d :name (byte-streams/convert new String))))\n                     data)]\n          (println n)\n          n))\n      (fn [data] data))\n    [{:name \&quot;www.baidu.com\&quot; :type 1}\n     {:name \&quot;www.google.com\&quot; :type 2}]))\n&quot;, :offset 691, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n    (compile-frame\n      (repeated\n        (ordered-map :name (string :ascii :suffix 0x00)\n                     :type :uint16-be)\n        :prefix :none)\n      (fn [data]\n        (println data)\n        (let [n (map (fn [d]\n                       (let [s (clojure.string/split (:name d) #\&quot;\\.\&quot;)\n                             fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n                             new (io/encode fr s)]\n                         (assoc d :name (byte-streams/convert new String))))\n                     data)]\n          (println n)\n          n))\n      (fn [data] data))\n    [{:name \&quot;www.baidu.com\&quot; :type 1}\n     {:name \&quot;www.google.com\&quot; :type 2}]))\n&quot;, :offset 712, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n    (compile-frame\n      (repeated\n        (ordered-map :name (string :ascii :suffix 0x00)\n                     :type :uint16-be)\n        :prefix :none)\n      (fn [data]\n        (println data)\n        (let [n (map (fn [d]\n                       (let [s (clojure.string/split (:name d) #\&quot;\\.\&quot;)\n                             fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n                             new (io/encode fr s)]\n                         (assoc d :name (byte-streams/convert new String))))\n                     data)]\n          (println n)\n          n))\n      (fn [data] data))\n    [{:name \&quot;www.baidu.com\&quot; :type 1}\n     {:name \&quot;www.google.com\&quot; :type 2}\n     {:name \&quot;\&quot;}]))\n&quot;, :offset 728, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n    (compile-frame\n      (repeated\n        (ordered-map :name (string :ascii :suffix 0x00)\n                     :type :uint16-be)\n        :prefix :none)\n      (fn [data]\n        (println data)\n        (let [n (map (fn [d]\n                       (let [s (clojure.string/split (:name d) #\&quot;\\.\&quot;)\n                             fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n                             new (io/encode fr s)]\n                         (assoc d :name (byte-streams/convert new String))))\n                     data)]\n          (println n)\n          n))\n      (fn [data] data))\n    [{:name \&quot;www.baidu.com\&quot; :type 1}\n     {:name \&quot;www.google.com\&quot; :type 2}\n     {:name \&quot;aaa\&quot; :type 3}]))\n&quot;, :offset 739, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n    (compile-frame\n      (repeated\n        (ordered-map :name (string :ascii :suffix 0x00)\n                     :type :uint16-be)\n        :prefix :none)\n      (fn [data]\n        (println data)\n        (let [n (map (fn [d]\n                       (let [s (clojure.string/split (:name d) #\&quot;\\.\&quot;)\n                             fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n                             new (io/encode fr s)]\n                         (println (byte-streams/convert new String))\n                         (assoc d :name (byte-streams/convert new String))))\n                     data)]\n          (println n)\n          n))\n      (fn [data] data))\n    [{:name \&quot;www.baidu.com\&quot; :type 1}\n     {:name \&quot;www.google.com\&quot; :type 2}\n     {:name \&quot;aaa\&quot; :type 3}]))\n&quot;, :offset 808, :ns &quot;user&quot;} {:command &quot;b&quot;, :offset 1, :ns &quot;user&quot;} {:command &quot;(*e)&quot;, :offset 4, :ns &quot;user&quot;} {:command &quot;*e&quot;, :offset 2, :ns &quot;user&quot;} {:command &quot;(def pr\n  (compile-frame\n    (ordered-map :transaction-id :uint16\n                 :flags flags-frame\n\n                 ;; Automatically populate this field\n                 :query-rrs :uint16\n                 :answer-rrs :uint16\n                 :authority-rrs :uint16\n                 :additional-rrs :uint16\n\n                 :query (repeated query-field :prefix :none)\n                 ;:answers (repeated rr-field :prefix :none)\n                 ;:authoritative (repeated rr-field :prefix :none)\n                 ;:additional (repeated rr-field :prefix :none)\n                 )\n    fn-encode\n    fn-decode))&quot;, :offset 613, :ns &quot;user&quot;} {:command &quot;(decode pr b)&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes b)&quot;, :offset 28, :ns &quot;user&quot;} {:command &quot;(decode protocol b)&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(byte-streams/print-bytes\n  (io/encode\n    (compile-frame\n      (repeated\n        (ordered-map :name (string :ascii :suffix \&quot;\\0\&quot;)\n                     :type :uint16-be)\n        :prefix :none)\n      (fn [data]\n        (println data)\n        (let [n (map (fn [d]\n                       (let [s (clojure.string/split (:name d) #\&quot;\\.\&quot;)\n                             fr (repeated (string :ascii :prefix :ubyte) :prefix :none)\n                             new (io/encode fr s)]\n                         (println (byte-streams/convert new String))\n                         (assoc d :name (byte-streams/convert new String))))\n                     data)]\n          (println n)\n          n))\n      (fn [data] data))\n    [{:name \&quot;www.baidu.com\&quot; :type 1}\n     {:name \&quot;www.google.com\&quot; :type 2}\n     {:name \&quot;aaa\&quot; :type 3}]))&quot;, :offset 808, :ns &quot;user&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REPL for clojure-dns">
    <configuration name="REPL for clojure-dns" type="ClojureREPL" factoryName="Local" temporary="true">
      <setting name="replType" value="1" />
      <module name="clojure-dns" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
    </configuration>
    <configuration default="true" type="Applet" factoryName="Applet">
      <option name="HTML_USED" value="false" />
      <option name="WIDTH" value="400" />
      <option name="HEIGHT" value="300" />
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
      <module />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="TEST_OBJECT" value="class" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <envs />
      <patterns />
    </configuration>
    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType" factoryName="Plugin">
      <module name="" />
      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
      <option name="PROGRAM_PARAMETERS" />
      <predefined_log_file id="idea.log" enabled="true" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="TestNG" factoryName="TestNG">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="SUITE_NAME" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="GROUP_NAME" />
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <option name="OUTPUT_DIRECTORY" />
      <option name="ANNOTATION_TYPE" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <option name="USE_DEFAULT_REPORTERS" value="false" />
      <option name="PROPERTIES_FILE" />
      <envs />
      <properties />
      <listeners />
    </configuration>
    <recent_temporary>
      <list size="1">
        <item index="0" class="java.lang.String" itemvalue="Clojure REPL.REPL for clojure-dns" />
      </list>
    </recent_temporary>
  </component>
  <component name="SbtLocalSettings">
    <option name="externalProjectsViewState">
      <projects_view />
    </option>
  </component>
  <component name="ShelveChangesManager" show_recycled="false">
    <option name="remove_strategy" value="false" />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="fbe62677-fc48-4014-abe2-cc3592622c94" name="Default" comment="" />
      <created>1535178696517</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1535178696517</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="23" width="1920" height="877" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info id="Palette" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Image Layers" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Analysis" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="true" content_ui="tabs" />
      <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="REPL" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.71086264" sideWeight="0.5" order="3" side_tool="true" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Tool" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.06549521" sideWeight="0.5" order="0" side_tool="false" content_ui="combo" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="UI Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Theme Preview" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="true" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
    </layout>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager />
    <watches-manager />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="330">
          <caret line="15" column="0" lean-forward="false" selection-start-line="15" selection-start-column="0" selection-end-line="15" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="7" column="39" lean-forward="false" selection-start-line="7" selection-start-column="39" selection-end-line="7" selection-end-column="39" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/test.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="36762">
          <caret line="1671" column="135" lean-forward="false" selection-start-line="1671" selection-start-column="135" selection-end-line="1671" selection-end-column="135" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/protocol.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1628">
          <caret line="74" column="16" lean-forward="false" selection-start-line="74" selection-start-column="16" selection-end-line="74" selection-end-column="16" />
          <folding>
            <marker date="1535935564508" expanded="true" signature="1818:2291" ph="(defn fn-encode ...)" />
            <marker date="1535935564508" expanded="true" signature="3092:3542" ph="(defn construct-request ...)" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="352">
          <caret line="16" column="65" lean-forward="false" selection-start-line="16" selection-start-column="65" selection-end-line="16" selection-end-column="65" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="7" column="39" lean-forward="false" selection-start-line="7" selection-start-column="39" selection-end-line="7" selection-end-column="39" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/protocol.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="572">
          <caret line="26" column="19" lean-forward="true" selection-start-line="26" selection-start-column="19" selection-end-line="26" selection-end-column="19" />
          <folding>
            <marker date="1535935564508" expanded="true" signature="1818:2291" ph="(defn fn-encode ...)" />
            <marker date="1535935564508" expanded="true" signature="3092:3542" ph="(defn construct-request ...)" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="352">
          <caret line="16" column="65" lean-forward="false" selection-start-line="16" selection-start-column="65" selection-end-line="16" selection-end-column="65" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="7" column="39" lean-forward="false" selection-start-line="7" selection-start-column="39" selection-end-line="7" selection-end-column="39" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/protocol.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="330">
          <caret line="15" column="36" lean-forward="false" selection-start-line="15" selection-start-column="36" selection-end-line="15" selection-end-column="36" />
          <folding>
            <marker date="1535935564508" expanded="true" signature="1818:2291" ph="(defn fn-encode ...)" />
            <marker date="1535935564508" expanded="true" signature="3092:3542" ph="(defn construct-request ...)" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="7" column="39" lean-forward="false" selection-start-line="7" selection-start-column="39" selection-end-line="7" selection-end-column="39" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/protocol.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="330">
          <caret line="15" column="36" lean-forward="false" selection-start-line="13" selection-start-column="22" selection-end-line="15" selection-end-column="37" />
          <folding>
            <marker date="1535935564508" expanded="true" signature="1818:2291" ph="(defn fn-encode ...)" />
            <marker date="1535935564508" expanded="true" signature="3092:3542" ph="(defn construct-request ...)" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="352">
          <caret line="16" column="65" lean-forward="false" selection-start-line="16" selection-start-column="65" selection-end-line="16" selection-end-column="65" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="7" column="32" lean-forward="false" selection-start-line="7" selection-start-column="32" selection-end-line="7" selection-end-column="32" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/protocol.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="968">
          <caret line="44" column="28" lean-forward="true" selection-start-line="44" selection-start-column="28" selection-end-line="44" selection-end-column="28" />
          <folding>
            <marker date="1535935564508" expanded="true" signature="1818:2291" ph="(defn fn-encode ...)" />
            <marker date="1535935564508" expanded="true" signature="3092:3542" ph="(defn construct-request ...)" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="7" column="39" lean-forward="false" selection-start-line="7" selection-start-column="39" selection-end-line="7" selection-end-column="39" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/protocol.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1628">
          <caret line="74" column="16" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="119" selection-end-column="0" />
          <folding>
            <marker date="1535935564508" expanded="true" signature="1818:2291" ph="(defn fn-encode ...)" />
            <marker date="1535935564508" expanded="true" signature="3092:3542" ph="(defn construct-request ...)" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="330">
          <caret line="15" column="0" lean-forward="false" selection-start-line="15" selection-start-column="0" selection-end-line="15" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_dns/test.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-11584">
          <caret line="1109" column="47" lean-forward="false" selection-start-line="1109" selection-start-column="47" selection-end-line="1109" selection-end-column="47" />
          <folding />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>